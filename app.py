import logging
import os
import sys
from argparse import ArgumentParser
from logging import StreamHandler

import unicodedata2
import mutagen
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from mutagen.easyid3 import EasyID3
from mutagen.id3 import TIT2
from yandex_music import Client, Track

LAST_FILE_NAME = 'last.txt'
SHEDULE_INTERVAL_SECONDS = 60 * 30 # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

logger = logging.getLogger(__name__)

handler = StreamHandler(stream=sys.stdout)
logger.addHandler(handler)

logger.setLevel(logging.DEBUG)
logger.info('Start YAM bot')

parser = ArgumentParser()

parser.add_argument("-b", "--bot", dest="bot", required=True,
                    help="telegram bot token", metavar="BOT")
parser.add_argument("-c", "--chat", dest="chat",
                    help="telegram chat id", metavar="CHAT")
parser.add_argument("-g", "--group", dest="group",
                    help="telegram group id", metavar="GROUP")
parser.add_argument("-y", "--yam", dest="yam",
                    help="Yandex Music token", metavar="YAM")

parser.add_argument("-q", "--quiet",
                    action="store_false", dest="verbose", default=True,
                    help="don't print status messages to stdout")

DELIMITER = "/"
# –¢—Ä–∞–Ω—Å–ª–∏—Ç–∏—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
def slugify(value):
    symbols = (u"–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø",
               u"abvgdeejzijklmnoprstufhzcss_y_euaABVGDEEJZIJKLMNOPRSTUFHZCSS_Y_EUA")

    tr = {ord(a): ord(b) for a, b in zip(*symbols)}

    value = value.translate(tr)  # looks good

    value = unicodedata2.normalize('NFKD', value).encode('ascii', 'ignore').decode('utf-8').strip()
    return value

def set_mp3_tags(track_file_name: str, track: Track):
    try:
        meta = EasyID3(track_file_name)
    except mutagen.id3.ID3NoHeaderError:
        meta = mutagen.File(track_file_name, easy=True)
        meta.add_tags()

    meta['title'] = track.title
    meta['artist'] = DELIMITER.join(i['name'] for i in track.artists)
    meta['genre'] = track.albums[0].genre
    meta.save()


def main(arguments):
    args = parser.parse_args(arguments)

    token_tg = args.bot
    token_yam = args.yam
    chat_id_tg = args.chat
    group_id_tg = args.group

    bot = Bot(token=token_tg, parse_mode=types.ParseMode.HTML)
    dp = Dispatcher(bot)

    async def bot_online(_):
        print('–Ø –≥–æ—Ç–æ–≤!')

    async def check_and_send_lastTrack():
        if chat_id_tg == '':
            logger.error("empty chat id")
            return
        if group_id_tg == '':
            logger.error("empty group id")
            return
        if token_yam == '':
            logger.error("empty yandexMusic token")
            return
        
        # await bot.send_message(chat_id_tg, '–£—à—ë–ª –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫–Ω—É—Ç—ã–π —Ç—Ä–µ–∫') # –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª—Å
        print('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∞–π–∫–Ω—É—Ç–æ–≥–æ —Ç—Ä–µ–∫–∞')
        try:
            with open(LAST_FILE_NAME, 'r',
                      encoding='utf-8') as last_state_open:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫–Ω—É—Ç—ã–º —Ç—Ä–µ–∫–æ–º
                last_state = last_state_open.read()  # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫–Ω—É—Ç—ã–π —Ç—Ä–µ–∫
        except:
            last_state = ""  # –ù–µ—Ç —Ñ–∞–π–ª–∞ - –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫

        client = Client(token_yam).init()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—Ü–µ–º —Ç–æ–∫–µ–Ω
        likes = client.users_likes_tracks()
        index_last_track = 0  # –≤–æ–±—â–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å–ª–∞–Ω–Ω—ã–π
        for index_last_track, track in enumerate(likes.tracks):
            if track.id == last_state:
                index_last_track -= 1  # —Å–ª–µ–¥—É—é—â–∏–π
                break
        while index_last_track >= 0:
            track = likes[index_last_track].fetch_track()
            if track.available:
                break
            index_last_track -= 1

        if index_last_track < 0 or (not track.available):
            logger.error("–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç")
            return

        artist = track.artists_name()[0]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏—Å—Ç–∞
        title = track.title  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
        album = track.albums[0]
        genre = album.genre
        url = f'https://music.yandex.ru/album/{album.id}/track/{track.id}'  # –ü–æ–¥—Å—Ç–∞–≤—è–ª–µ–º URL
        print(f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫: {artist} - {title}')
        # await bot.send_message(chat_id_tg, '–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫: {artist} - {title}') # –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª—Å
        send_file = f'{artist} - {title}.mp3' # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp3
        send_file = send_file.replace('*', '_')
        slugify(send_file).replace("/", "_").replace("\\", "_").replace("\'", "_")
        send_file = send_file.replace("\"", "_").replace("?", "_")
        send_file = send_file.replace("|", "_")
        send_file = send_file.replace(":", "_")
        send_file = send_file.replace("!", "_")
        send_file = send_file.replace("*", "_")
        if send_file == last_state:
            # await bot.send_message(chat_id_tg, '–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç') # –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª—Å
            print('–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç')  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–∞–π–∫–Ω—É—Ç—ã–π –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è. –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        else:           
            track.download(send_file)  # –ö–∞—á–∞–µ–º —Ç—Ä–µ–∫
            set_mp3_tags(send_file, track)
            try:
                await bot.send_audio(group_id_tg, open(send_file, 'rb'),
                                     caption=f'üéß {artist} - {title}\n<b>üéß –ñ–∞–Ω—Ä:</b> #{genre}\n\n<a href="{url}">üéß –Ø.–ú—É–∑—ã–∫–∞</a>')
                print(f'–û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {send_file}')
                try:
                    with open(LAST_FILE_NAME, 'w',
                              encoding='utf-8') as last_track:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ—É
                        last_track.write(track.id)  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫
                except:
                    logger.error("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {0}", LAST_FILE_NAME)
            finally:
                os.remove(send_file)  # –£–¥–∞–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π —Ñ–∞–π–ª
                # await bot.send_message(chat_id_tg, f'–£–¥—ë–ª–∞–Ω: {send_file}') # –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ª—Å
                print(f'–£–¥—ë–ª–∞–Ω: {send_file}')


    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_and_send_lastTrack, 'interval', seconds=SHEDULE_INTERVAL_SECONDS)
    scheduler.start()

    logger.info('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))

    try:
        executor.start_polling(dp, skip_updates=True, on_startup=bot_online)
    except (KeyboardInterrupt, SystemExit):
        # Not strictly necessary if daemonic mode is enabled but should be done if possible
        scheduler.shutdown()


if __name__ == '__main__':
    argv = sys.argv[1:]

    if not len(argv):
        parser.print_help()
        sys.exit(1)

    main(argv)